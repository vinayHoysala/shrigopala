{"version":3,"sources":["logo.svg","components/Product.jsx","components/ProductsList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Product","props","className","alt","src","name","price","ProductsList","products","map","product","key","App","state","searchValue","fetch","then","response","json","items","setState","this","filteredProducts","filter","toLowerCase","includes","type","placeholder","onChange","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,2LCG9BC,G,kBAAU,SAAAC,GAAK,OACxB,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,gBAAgBC,IAAI,UAAUC,IAAI,aACjD,4BAAKH,EAAMI,MACX,4BAAKJ,EAAMK,UCHNC,G,MAAe,SAACN,GAAD,OACxB,yBAAKC,UAAU,aACVD,EAAMO,SAASC,KAAI,SAAAC,GAAO,OACnB,kBAAC,EAAD,CAASC,IAAKD,EAAQC,IAAKN,KAAMK,EAAQL,KAAMC,MAAOI,EAAQJ,cC8C/DM,G,kBA9Cb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CAACL,SAAS,GACTM,YAAc,IAHjB,E,iFASO,IAAD,OACjBC,MAAM,uDACHC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACZ,SAASW,S,+BAGlC,IAAD,SACyBE,KAAKR,MAA7BL,EADD,EACCA,SAASM,EADV,EACUA,YACVQ,EAAmBd,EAASe,QAAO,SAAAb,GAAO,OAAEA,EAAQL,KAAKmB,cAAcC,SAASX,EAAYU,kBAElG,OACE,yBAAKtB,UAAU,OACb,wBAAIA,UAAU,oBAAd,eACE,2BACMwB,KAAK,SACLC,YAAY,kBACZzB,UAAU,aACV0B,SAAU,SAAAC,GACR,EAAKT,SAAS,CAACN,YAAYe,EAAEC,OAAOC,WAG9C,kBAAC,EAAD,CAAcvB,SAAUc,S,GA/BdU,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.b443f96c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './product.css';\n\nexport const Product = props=>(\n    <div className=\"product-container\">\n        <img className=\"product-image\" alt=\"product\" src=\"ghee.jpg\"></img>\n        <h1>{props.name}</h1>\n        <h2>{props.price}</h2>\n    </div>\n);\n\n\n","import React from 'react';\nimport {Product} from './Product';\nimport './productsgrid.css';\n\nexport const ProductsList = (props)=>(\n    <div className='prod-grid'>\n        {props.products.map(product=> (\n                <Product key={product.key} name={product.name} price={product.price}/>                \n            ))}\n    </div>\n)\n\n\n\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ProductsList } from './components/ProductsList';\nimport './mystyle.css'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {products:[],\n                  searchValue : ''};\n    \n  };\n\n\n  \n  componentDidMount(){\n    fetch('https://myfelight.firebaseapp.com/shriproducts.json')\n      .then(response=>response.json())\n      .then(items => this.setState({products:items}));\n  }\n\n  render(){\n    const {products,searchValue} = this.state;\n    const filteredProducts = products.filter(product=>product.name.toLowerCase().includes(searchValue.toLowerCase()));\n\n    return (\n      <div className='App'>\n        <h1 className='shri-gopala-logo'>Shri Gopala</h1>\n          <input \n                type='search'\n                placeholder='search products'\n                className='search-bar'\n                onChange={e=> {\n                  this.setState({searchValue:e.target.value});\n                }} />\n\n        <ProductsList products={filteredProducts}>    \n        </ProductsList>\n        \n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}